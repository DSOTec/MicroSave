/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RewardVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "POINTS_PER_DEPOSIT"
      | "STREAK_BONUS_POINTS"
      | "STREAK_MILESTONE"
      | "claimPoints"
      | "getPoints"
      | "onDepositDay"
      | "owner"
      | "points"
      | "renounceOwnership"
      | "savingsPool"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PointsAwarded"
      | "PointsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "POINTS_PER_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_BONUS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_MILESTONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onDepositDay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "points", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "POINTS_PER_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_BONUS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_MILESTONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onDepositDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    streak: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, streak: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    streak: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardVault extends BaseContract {
  connect(runner?: ContractRunner | null): RewardVault;
  waitForDeployment(): Promise<this>;

  interface: RewardVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  POINTS_PER_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  STREAK_BONUS_POINTS: TypedContractMethod<[], [bigint], "view">;

  STREAK_MILESTONE: TypedContractMethod<[], [bigint], "view">;

  claimPoints: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPoints: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  onDepositDay: TypedContractMethod<
    [user: AddressLike, streak: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  points: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  savingsPool: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "POINTS_PER_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_BONUS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_MILESTONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimPoints"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onDepositDay"
  ): TypedContractMethod<
    [user: AddressLike, streak: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "points"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "savingsPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwarded"
  ): TypedContractEvent<
    PointsAwardedEvent.InputTuple,
    PointsAwardedEvent.OutputTuple,
    PointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "PointsClaimed"
  ): TypedContractEvent<
    PointsClaimedEvent.InputTuple,
    PointsClaimedEvent.OutputTuple,
    PointsClaimedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsAwarded(address,uint256,uint16)": TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;
    PointsAwarded: TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;

    "PointsClaimed(address,uint256)": TypedContractEvent<
      PointsClaimedEvent.InputTuple,
      PointsClaimedEvent.OutputTuple,
      PointsClaimedEvent.OutputObject
    >;
    PointsClaimed: TypedContractEvent<
      PointsClaimedEvent.InputTuple,
      PointsClaimedEvent.OutputTuple,
      PointsClaimedEvent.OutputObject
    >;
  };
}
