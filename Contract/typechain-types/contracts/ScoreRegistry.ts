/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ScoreRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FREQ_WINDOW"
      | "GRACE_PERIOD"
      | "MAX_SCORE"
      | "getUserFreq30"
      | "getUserScore"
      | "getUserStats"
      | "getUserStreak"
      | "lastScoredDay"
      | "owner"
      | "renounceOwnership"
      | "savingsPool"
      | "score"
      | "streakDays"
      | "transferOwnership"
      | "updateScore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "ScoreSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FREQ_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserFreq30",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastScoredDay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "score", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "streakDays",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScore",
    values: [AddressLike, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "FREQ_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserFreq30",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastScoredDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "score", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "streakDays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScore",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreSetEvent {
  export type InputTuple = [
    user: AddressLike,
    score: BigNumberish,
    streak: BigNumberish,
    freq30: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    score: bigint,
    streak: bigint,
    freq30: bigint
  ];
  export interface OutputObject {
    user: string;
    score: bigint;
    streak: bigint;
    freq30: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreRegistry;
  waitForDeployment(): Promise<this>;

  interface: ScoreRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FREQ_WINDOW: TypedContractMethod<[], [bigint], "view">;

  GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MAX_SCORE: TypedContractMethod<[], [bigint], "view">;

  getUserFreq30: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getUserScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        userScore: bigint;
        userStreak: bigint;
        freq30: bigint;
      }
    ],
    "view"
  >;

  getUserStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  lastScoredDay: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  savingsPool: TypedContractMethod<[], [string], "view">;

  score: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  streakDays: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateScore: TypedContractMethod<
    [user: AddressLike, userDaysFromPool: BigNumberish[]],
    [
      [bigint, bigint, bigint] & {
        newScore: bigint;
        newStreak: bigint;
        freq30: bigint;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FREQ_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserFreq30"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        userScore: bigint;
        userStreak: bigint;
        freq30: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastScoredDay"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "savingsPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "score"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "streakDays"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateScore"
  ): TypedContractMethod<
    [user: AddressLike, userDaysFromPool: BigNumberish[]],
    [
      [bigint, bigint, bigint] & {
        newScore: bigint;
        newStreak: bigint;
        freq30: bigint;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ScoreSet"
  ): TypedContractEvent<
    ScoreSetEvent.InputTuple,
    ScoreSetEvent.OutputTuple,
    ScoreSetEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ScoreSet(address,uint16,uint16,uint8)": TypedContractEvent<
      ScoreSetEvent.InputTuple,
      ScoreSetEvent.OutputTuple,
      ScoreSetEvent.OutputObject
    >;
    ScoreSet: TypedContractEvent<
      ScoreSetEvent.InputTuple,
      ScoreSetEvent.OutputTuple,
      ScoreSetEvent.OutputObject
    >;
  };
}
