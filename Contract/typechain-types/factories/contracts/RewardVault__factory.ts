/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  RewardVault,
  RewardVaultInterface,
} from "../../contracts/RewardVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_savingsPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientPoints",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyPool",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "streak",
        type: "uint16",
      },
    ],
    name: "PointsAwarded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PointsClaimed",
    type: "event",
  },
  {
    inputs: [],
    name: "POINTS_PER_DEPOSIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STREAK_BONUS_POINTS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STREAK_MILESTONE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimPoints",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getPoints",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "streak",
        type: "uint16",
      },
    ],
    name: "onDepositDay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "points",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "savingsPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000dec38038062000dec833981810160405281019062000037919062000290565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a49190620002e8565b60405180910390fd5b620000be816200016260201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000126576040517f4b60273500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000305565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000258826200022b565b9050919050565b6200026a816200024b565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b60008060408385031215620002aa57620002a962000226565b5b6000620002ba8582860162000279565b9250506020620002cd8582860162000279565b9150509250929050565b620002e2816200024b565b82525050565b6000602082019050620002ff6000830184620002d7565b92915050565b608051610ac4620003286000396000818161037701526103dd0152610ac46000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101545780637fc842fe1461015e5780638da5cb5b1461017c578063b0fb56641461019a578063ee204abb146101b6578063f2fde38b146101e6576100a9565b8063358b8166146100ae5780633ac795de146100de57806341d7b1d3146100fa5780635e9cb48e146101185780636fa0e65314610136575b600080fd5b6100c860048036038101906100c39190610835565b610202565b6040516100d5919061087b565b60405180910390f35b6100f860048036038101906100f391906108c2565b61021a565b005b61010261036b565b60405161010f919061087b565b60405180910390f35b610120610370565b60405161012d919061087b565b60405180910390f35b61013e610375565b60405161014b91906108fe565b60405180910390f35b61015c610399565b005b6101666103ad565b604051610173919061087b565b60405180910390f35b6101846103b2565b60405161019191906108fe565b60405180910390f35b6101b460048036038101906101af9190610953565b6103db565b005b6101d060048036038101906101cb9190610835565b6105b0565b6040516101dd919061087b565b60405180910390f35b61020060048036038101906101fb9190610835565b6105f9565b005b60016020528060005260406000206000915090505481565b60008103610254576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156102cd576040517f303e7a0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fba953728785de35be3827ee7a7a7867a8472947562602939440e6c0bdbf4725e82604051610360919061087b565b60405180910390a250565b600581565b601481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6103a161067f565b6103ab6000610706565b565b600781565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610460576040517f4b60273500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104c6576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005905060008261ffff161180156104f05750600060078361ffff166104ee91906109c2565b145b15610505576014816105029190610a22565b90505b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105549190610a22565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f81ecaaa31e69fc17832354b83912ed393c78921b2e6fcf355113f2fb513e4f9982846040516105a3929190610a65565b60405180910390a2505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61060161067f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106735760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161066a91906108fe565b60405180910390fd5b61067c81610706565b50565b6106876107ca565b73ffffffffffffffffffffffffffffffffffffffff166106a56103b2565b73ffffffffffffffffffffffffffffffffffffffff1614610704576106c86107ca565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016106fb91906108fe565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610802826107d7565b9050919050565b610812816107f7565b811461081d57600080fd5b50565b60008135905061082f81610809565b92915050565b60006020828403121561084b5761084a6107d2565b5b600061085984828501610820565b91505092915050565b6000819050919050565b61087581610862565b82525050565b6000602082019050610890600083018461086c565b92915050565b61089f81610862565b81146108aa57600080fd5b50565b6000813590506108bc81610896565b92915050565b6000602082840312156108d8576108d76107d2565b5b60006108e6848285016108ad565b91505092915050565b6108f8816107f7565b82525050565b600060208201905061091360008301846108ef565b92915050565b600061ffff82169050919050565b61093081610919565b811461093b57600080fd5b50565b60008135905061094d81610927565b92915050565b6000806040838503121561096a576109696107d2565b5b600061097885828601610820565b92505060206109898582860161093e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109cd82610862565b91506109d883610862565b9250826109e8576109e7610993565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a2d82610862565b9150610a3883610862565b9250828201905080821115610a5057610a4f6109f3565b5b92915050565b610a5f81610919565b82525050565b6000604082019050610a7a600083018561086c565b610a876020830184610a56565b939250505056fea26469706673582212204f161ed40b782692045ed9cc38043e76a7e81d2c9dc46688d77885cc3671d08f64736f6c63430008140033";

type RewardVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardVault__factory extends ContractFactory {
  constructor(...args: RewardVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _savingsPool: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_savingsPool, _owner, overrides || {});
  }
  override deploy(
    _savingsPool: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_savingsPool, _owner, overrides || {}) as Promise<
      RewardVault & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RewardVault__factory {
    return super.connect(runner) as RewardVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardVaultInterface {
    return new Interface(_abi) as RewardVaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RewardVault {
    return new Contract(address, _abi, runner) as unknown as RewardVault;
  }
}
